from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN
import sqlite3
import database
import random

MSG = """
–ü—Ä–∏–≤–µ—Ç, {}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BooX! üíö

–ú–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏, —á—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å –∏ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–Ω–∏–≥–æ–ª—é–±–∞–º–∏
–î–æ–±–∞–≤—å —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∫–Ω–∏–≥–∏!

–Ω–∞–ø–∏—à–∏ /add_book , —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É
"""

PHOTO = open('./img/boox_logo.png', 'rb')

bot = Bot(TOKEN)
dp = Dispatcher(bot)

def search_book(query):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM books WHERE title LIKE ? OR author LIKE ? OR genre LIKE ?", 
                   ('%{}%'.format(query), '%{}%'.format(query), '%{}%'.format(query)))
    books = cursor.fetchall()
    conn.close()
    return books

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_full_name = message.from_user.full_name
    user_id = message.from_user.id
    database.add_user(user_id, user_full_name)
    await bot.send_photo(user_id, PHOTO, MSG.format(user_full_name))

@dp.message_handler(commands=['add_book'])
async def add_book_handler(message: types.Message):
    user_input = message.text[9:].strip()
    if user_input:
        book = database.find_book(user_input)
        if book:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{book[0]}"))
            keyboard.add(InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="cancel"))
            await message.reply(f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book[1]} - {book[2]} ({book[3]})", reply_markup=keyboard)
        else:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_book")

@dp.callback_query_handler(lambda call: call.data.startswith("add_"))
async def add_book_callback_handler(call: types.CallbackQuery):
    book_id = int(call.data[4:])
    book = database.get_book_by_id(book_id)
    if book:
        database.add_book_to_user(call.from_user.id, book_id)
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–Ω–∏–≥–∏", callback_data="show_books"))
        keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–∏–≥—É", callback_data="add_another"))

        await call.message.reply(f"–ö–Ω–∏–≥–∞ {book[1]} - {book[2]} ({book[3]}) –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=keyboard)
    else:
        await call.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query_handler(lambda call: call.data == "show_books")
async def show_books_callback_handler(call: types.CallbackQuery):
    books = database.get_user_books(call.from_user.id)
    if books:
        response = "–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n"
        for book in books:
            response += f"{book[1]} - {book[2]} ({book[3]})\n"
        await call.message.reply(response)
    else:
        await call.message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.")

@dp.callback_query_handler(lambda call: call.data == "add_another")
async def add_another_callback_handler(call: types.CallbackQuery):
    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_book")


@dp.message_handler(commands=['recommend'])
async def recommend_handler(message: types.Message):
    user_id = message.from_user.id
    user_books = database.get_user_books(user_id)
    if user_books:
        recommended_books = []
        for book in user_books:
            genre_books = database.get_books_by_genre(user_id, book[3])
            recommended_books.extend(genre_books)

        if recommended_books:
            book = random.choice(recommended_books)

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{book[0]}"))
            keyboard.add(InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="cancel"))

            response = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞:\n\n"
            response += f"{book[1]} - {book[2]} ({book[3]})"
            await message.reply(response, reply_markup=keyboard)
        else:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–∞—à–∏–º –∂–∞–Ω—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–Ω–∏–≥!")
    else:
        await message.reply("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

@dp.message_handler(commands=['delete'])
async def delete_handler(message: types.Message):
    user_id = message.from_user.id
    database.delete_user(user_id)
    await message.reply("–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")

@dp.message_handler(commands=['delete_book'])
async def delete_book_handler(message: types.Message):
    user_input = message.text[12:].strip()
    user_id = message.from_user.id
    if user_input:
        if database.check_book_added(user_id, user_input):
            database.delete_book_from_user(user_id, user_input)
            await message.reply(f"–ö–Ω–∏–≥–∞ '{user_input}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            await message.reply("–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ —É –≤–∞—Å –Ω–µ—Ç.")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete_book")

@dp.message_handler(commands=['show_books'])
async def show_books_handler(message: types.Message):
    user_id = message.from_user.id
    books = database.get_user_books(user_id)
    if books:
        response = "–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n"
        for book in books:
            response += f"{book[1]} - {book[2]} ({book[3]})\n"
        await message.reply(response)
    else:
        await message.reply("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏.")

if __name__ == '__main__':
    executor.start_polling(dp)