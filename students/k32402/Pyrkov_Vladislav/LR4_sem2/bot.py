from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN
import sqlite3
import database
import random

MSG = """
–ü—Ä–∏–≤–µ—Ç, {}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–ª—å–º–æ–±–æ—Ç! üíö

–ú–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
–î–æ–±–∞–≤—å —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ —Ñ–∏–ª—å–º—ã!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add_film - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
/recommend - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
/show_films - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–ª—å–º—ã
/update_director - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ —Ñ–∏–ª—å–º–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞
/delete - —É–¥–∞–ª–∏—Ç—å –≤—Å—é –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/delete_film - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
"""

PHOTO = open("./img/film.jpg", "rb")

bot = Bot(TOKEN)
dp = Dispatcher(bot)


def search_film(query):
    conn = sqlite3.connect("films.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT * FROM films WHERE title LIKE ? OR director LIKE ? OR genre LIKE ?",
        ("%{}%".format(query), "%{}%".format(query), "%{}%".format(query)),
    )
    films = cursor.fetchall()
    conn.close()
    return films


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_full_name = message.from_user.full_name
    user_id = message.from_user.id
    database.add_user(user_id, user_full_name)
    await bot.send_photo(user_id, PHOTO, MSG.format(user_full_name))


@dp.message_handler(commands=["add_film"])
async def add_film_handler(message: types.Message):
    user_input = message.text[9:].strip()
    if user_input:
        film = database.find_film(user_input)
        if film:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{film[0]}")
            )
            keyboard.add(InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="cancel"))
            await message.reply(
                f"–ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º: {film[1]} - {film[2]} ({film[3]})",
                reply_markup=keyboard,
            )
        else:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_film")


@dp.callback_query_handler(lambda call: call.data.startswith("add_"))
async def add_film_callback_handler(call: types.CallbackQuery):
    film_id = int(call.data[4:])
    film = database.get_film_by_id(film_id)
    if film:
        database.add_film_to_user(call.from_user.id, film_id)

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ñ–∏–ª—å–º—ã", callback_data="show_films")
        )
        keyboard.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∏–ª—å–º", callback_data="add_another")
        )

        await call.message.reply(
            f"–§–∏–ª—å–º {film[1]} - {film[2]} ({film[3]}) –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard
        )
    else:
        await call.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query_handler(lambda call: call.data == "show_films")
async def show_films_callback_handler(call: types.CallbackQuery):
    films = database.get_user_films(call.from_user.id)
    if films:
        response = "–í–∞—à–∏ —Ñ–∏–ª—å–º—ã:\n\n"
        for film in films:
            response += f"{film[1]} - {film[2]} ({film[3]})\n"
        await call.message.reply(response)
    else:
        await call.message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")


@dp.callback_query_handler(lambda call: call.data == "add_another")
async def add_another_callback_handler(call: types.CallbackQuery):
    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_film")


@dp.message_handler(commands=["recommend"])
async def recommend_handler(message: types.Message):
    user_id = message.from_user.id
    user_films = database.get_user_films(user_id)
    if user_films:
        recommended_films = []
        for film in user_films:
            genre_films = database.get_films_by_genre(user_id, film[3])
            recommended_films.extend(genre_films)

        if recommended_films:
            film = random.choice(recommended_films)

            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{film[0]}")
            )
            keyboard.add(InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="cancel"))

            response = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º:\n\n"
            response += f"{film[1]} - {film[2]} ({film[3]})"
            await message.reply(response, reply_markup=keyboard)
        else:
            await message.reply(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–∞—à–∏–º –∂–∞–Ω—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤!"
            )
    else:
        await message.reply(
            "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        )


@dp.message_handler(commands=["delete"])
async def delete_handler(message: types.Message):
    user_id = message.from_user.id
    database.delete_user(user_id)
    await message.reply("–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")


@dp.message_handler(commands=["delete_film"])
async def delete_film_handler(message: types.Message):
    user_input = message.text[12:].strip()
    user_id = message.from_user.id
    if user_input:
        if database.check_film_added(user_id, user_input):
            database.delete_film_from_user(user_id, user_input)
            await message.reply(f"–§–∏–ª—å–º '{user_input}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            await message.reply("–¢–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ —É –≤–∞—Å –Ω–µ—Ç.")
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete_film")


@dp.message_handler(commands=["show_films"])
async def show_films_handler(message: types.Message):
    user_id = message.from_user.id
    films = database.get_user_films(user_id)
    if films:
        response = "–í–∞—à–∏ —Ñ–∏–ª—å–º—ã:\n\n"
        for film in films:
            response += f"{film[1]} - {film[2]} ({film[3]})\n"
        await message.reply(response)
    else:
        await message.reply("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.")


@dp.message_handler(commands=["update_director"])
async def update_director_handler(message: types.Message):
    user_input = message.text[16:]
    print(user_input)
    if user_input:
        film = database.find_film(user_input.split()[0])
        if film:
            database.update_film_director(film[1], user_input.split()[1])
            await message.reply(
                "–¢–µ–ø–µ—Ä—å —É —Ñ–∏–ª—å–º–∞ "
                + film[1]
                + " —Ä–µ–∂–∏—Å—Å—ë—Ä "
                + user_input.split()[1]
                + " !"
            )


if __name__ == "__main__":
    executor.start_polling(dp)
